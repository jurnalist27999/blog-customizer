import { useEffect, useRef } from 'react';
import { OptionType } from 'src/constants/articleProps';

type UseEnterSubmit = {
	onChange?: (
		option: OptionType
	) => void /*onChange - событие в React, вызывается при
										//изменении значения элемента формы или компонента состояния
										Событие м.б. использовано для отслеживания значений полей вводы,
										выбора вариантов из списка и др.
										в React onChange обычно используется для связи между элементами
										интерфейса и состоянием приложения.
										Когда значение элемента изменяется, вызывается обработчик события onChange,
										который может обновить состояние приложения, отобразить изменения в интерфейсе*/;
	option: OptionType;
};

export const useEnterSubmit = ({ onChange, option }: UseEnterSubmit) => {
	/*ф-ция-резерв. принимает
															аргументом объект с двумя свойствами:
															событием onChange и option
															*/
	const optionRef =
		useRef<HTMLDivElement>(
			null
		); /*переменная представляет собой ссылку на HTML-элемент*/

	useEffect(() => {
		/*хук выполняет код при понтировании компонента и очищает список слушающих ф-ций
												(listener при его демонтировании)*/
		const optionHtml = optionRef.current;

		if (!optionHtml) return;

		const handleEnterKeyDown = (event: KeyboardEvent) => {
			/*ф-ция обрабатывает событие нажатия клавиши Enter
																если активным элементом является указанный HTML-элемент
																и нажата клавиша Enter, то вызывается ф-ция onChange для
																обновления состояния приложенмя и передачи измененного
																значения option*/
			if (document.activeElement === optionHtml && event.key === 'Enter') {
				onChange?.(option);
			}
		};

		optionHtml.addEventListener(
			'keydown',
			handleEnterKeyDown
		); /*указанный HTML-элемент добавляет слушающую ф-цию
																	handleEnterKeyDown для обработки события нажатия клавиши,
																	а ниже при демонтировании компонента ф-ция удаляется, чтобы
																	избежать утечки памяти*/

		// не забываем удалять листенеры, при размонтировании компонента
		return () => {
			optionHtml.removeEventListener('keydown', handleEnterKeyDown);
		};
	}, [
		onChange,
		option,
	]); /*передаем [onChange, option] как аргументы для удаления слушаюшей ф-ции handleEnterKeyDown,
								 которая обрабатывает событие нажатия клавиши Enter. Это гарантирует,
								 что даже если функция onChange или значение option изменятся
								 после монтирования компонента, слушающая функция все равно будет
								 удалена при демонтировании компонента.
								Таким образом, передача [onChange, option] позволяет избежать
								накопления слушающих функций и предотвратить возможные ошибки
								или проблемы с производительностью.*/
};

/*ДОПОЛНЕНИЕ. ЧТО ТАКОЕ Ф-ЦИЯ-РЕЗЕРВ
Hook (или функция-резерв) - это функция, которая позволяет использовать состояние и другие функции React
без необходимости создания полноценного компонента.
Они позволяют разбивать код на более мелкие и управляемые блоки,
что может упростить разработку и поддержку приложения.
Hooks могут быть использованы для управления состоянием, обработки событий и других задач.
В вашем примере, useEnterSubmit - это Hook, который принимает один аргумент (объект с двумя свойствами)
 и возвращает некоторые значения (ссылку на HTML-элемент и функции для обработки событий).
Внутри этого Hook используется Hook useEffect для выполнения кода при монтировании и
демонтировании компонента.*/
